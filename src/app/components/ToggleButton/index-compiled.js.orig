'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./ToggleButton.css');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToggleButton = function (_Component) {
  _inherits(ToggleButton, _Component);

  function ToggleButton() {
    var _ref;

    _classCallCheck(this, ToggleButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = ToggleButton.__proto__ || Object.getPrototypeOf(ToggleButton)).call.apply(_ref, [this].concat(args)));

    _this.state = {
      checked: _this.props.initiallyChecked
    };
    _this.handleClick = _this.handleClick.bind(_this);
    _this.createButtonContent = _this.createButtonContent.bind(_this);
    return _this;
  }

  _createClass(ToggleButton, [{
    key: 'handleClick',
    value: function handleClick() {
      var state = this.state,
          props = this.props;

      var checked = !state.checked;
      this.setState({ checked: checked });
      props.onClick(checked);
    }
  }, {
    key: 'createButtonContent',
    value: function createButtonContent() {
      var checked = this.state.checked;
      var _props = this.props,
          glyphicon = _props.glyphicon,
          iconPath = _props.iconPath,
          text = _props.text;

      var buttonContent = [];
      if (checked && glyphicon) {
        var glyphiconClass = (0, _classnames2.default)('glyphicon', 'glyphicon-' + glyphicon);
        buttonContent.push(_react2.default.createElement('span', { className: glyphiconClass, key: '1' }));
        buttonContent.push(' ');
      }
      if (iconPath) {
        buttonContent.push(_react2.default.createElement('img', { src: iconPath, key: '2' }));
        buttonContent.push(' ');
      }
      buttonContent.push(text);
      return buttonContent;
    }
  }, {
    key: 'render',
    value: function render() {
      var checked = this.state.checked;
      var style = this.props.style;

      var buttonClass = (0, _classnames2.default)('btn', 'btn-default', { active: checked });
      return _react2.default.createElement(
        'div',
        { className: 'ToggleButton' },
        _react2.default.createElement(
          'button',
          {
            type: 'button',
            className: buttonClass,
            'data-toggle': 'button',
            'aria-pressed': checked,
            onClick: this.handleClick,
            style: style
          },
          this.createButtonContent()
        )
      );
    }
  }]);

  return ToggleButton;
}(_react.Component);

ToggleButton.propTypes = {
  initiallyChecked: _react.PropTypes.bool,
  glyphicon: _react.PropTypes.string,
  iconPath: _react.PropTypes.string,
  text: _react.PropTypes.string,
  onClick: _react.PropTypes.func,
  style: _react.PropTypes.object
};

ToggleButton.defaultProps = {
  initiallyChecked: false,
  glyphicon: null,
  iconPath: null,
  text: '',
  onClick: function onClick() {},
  style: null
};

exports.default = ToggleButton;

//# sourceMappingURL=index-compiled.js.map