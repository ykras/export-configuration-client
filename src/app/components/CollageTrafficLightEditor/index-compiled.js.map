{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport React, {PropTypes} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './CollageTrafficLightEditor.css';\r\nimport classNames from 'classnames';\r\nimport selectors from '../../store/selectors';\r\nimport {capitalize, toNumber, toString, isNaN} from 'lodash';\r\nimport {curry} from 'ramda';\r\nimport localizedStrings, {localizeItems} from '../../localization';\r\nimport TextInput from '../TextInput';\r\nimport Button from '../Button';\r\nimport Selector from '../Selector';\r\nimport pictureTypes from '../../common/collagePictureTypes';\r\n\r\nconst handleEditingOf = curry((paramName, handler, currentTrafficLight, newParamValue) => {\r\n  const newTrafficLight = {...currentTrafficLight,\r\n    [paramName]: isNaN(toNumber(newParamValue)) ? 0 : toNumber(newParamValue)};\r\n  handler(newTrafficLight);\r\n});\r\n\r\nconst handlePictureTypeEditing = curry((handler, currentTrafficLight,\r\n                                        getCollagePictureTypeName, newPictureTypeId) => {\r\n  const newPictureType = getCollagePictureTypeName(newPictureTypeId);\r\n  const newTrafficLight = {\r\n    ...currentTrafficLight,\r\n    pictureType: newPictureType\r\n  };\r\n  handler(newTrafficLight);\r\n});\r\n\r\nconst handleRectSelect = (handler, curTrafficLight, rect) => () => {\r\n  const newTrafficLight = {\r\n    ...curTrafficLight,\r\n    x: rect.x,\r\n    y: rect.y,\r\n    width: rect.w,\r\n    height: rect.h\r\n  };\r\n  handler(newTrafficLight);\r\n};\r\n\r\nconst handleApply = (handler, trafficLight) => () => handler(trafficLight);\r\n\r\nconst CollageTrafficLightEditor = ({className, trafficLight, onEdit, onApply,\r\n  selectedRectangle, collagePictureTypes, getCollagePictureTypeId, getCollagePictureTypeName}) => (\r\n  <div className={classNames('CollageTrafficLightEditor', className)}>\r\n    <div className=\"row\">\r\n      <div className=\"col-xs-11\">\r\n        <Selector\r\n          label={`${capitalize(localizedStrings.CollagePicture)}:`}\r\n          selectedItemId={getCollagePictureTypeId(trafficLight.pictureType)}\r\n          items={localizeItems(collagePictureTypes\r\n            .filter(p => p.name === pictureTypes.OverviewBegin || p.name === pictureTypes.OverviewEnd),\r\n            capitalize)}\r\n          selectItem={handlePictureTypeEditing(onEdit, trafficLight, getCollagePictureTypeName)}\r\n          />\r\n      </div>\r\n    </div>\r\n    <div className=\"row\">\r\n      <div className=\"col-xs-12\">\r\n        {`${capitalize(localizedStrings.CollageTrafficLightTargetPositionAndSize)}:`}\r\n      </div>\r\n    </div>\r\n    <div className=\"row\">\r\n      <div className=\"col-xs-1\">\r\n        X:\r\n      </div>\r\n      <div className=\"col-xs-3\">\r\n        <TextInput\r\n          id=\"tgtX\" value={toString(trafficLight.x)}\r\n          onTextChanged={handleEditingOf('x', onEdit, trafficLight)}\r\n          />\r\n      </div>\r\n      <div className=\"col-xs-1 col-xs-offset-1\">\r\n        Y:\r\n      </div>\r\n      <div className=\"col-xs-3\">\r\n        <TextInput\r\n          id=\"tgtY\" value={toString(trafficLight.y)}\r\n          onTextChanged={handleEditingOf('y', onEdit, trafficLight)}\r\n          />\r\n      </div>\r\n      <div className=\"col-xs-1 col-xs-offset-1\">\r\n        <Button\r\n          iconPath={require(\"../../images/select_rect.png\")} style={{padding: 0}}\r\n          disabled={selectedRectangle === null}\r\n          onClick={handleRectSelect(onEdit, trafficLight, selectedRectangle, 'target')}\r\n          />\r\n      </div>\r\n    </div>\r\n    <div className=\"row\">\r\n      <div className=\"col-xs-1\">\r\n        W:\r\n      </div>\r\n      <div className=\"col-xs-3\">\r\n        <TextInput\r\n          id=\"tgtW\" value={toString(trafficLight.width)}\r\n          onTextChanged={handleEditingOf('width', onEdit, trafficLight)}\r\n          />\r\n      </div>\r\n      <div className=\"col-xs-1 col-xs-offset-1\">\r\n        H:\r\n      </div>\r\n      <div className=\"col-xs-3\">\r\n        <TextInput\r\n          id=\"tgtH\" value={toString(trafficLight.height)}\r\n          onTextChanged={handleEditingOf('height', onEdit, trafficLight)}\r\n          />\r\n      </div>\r\n    </div>\r\n    <div className=\"row\">\r\n      <div className=\"col-xs-4 col-xs-offset-7\">\r\n        <Button\r\n          text={capitalize(localizedStrings.Apply)}\r\n          disabled={!trafficLight.stale}\r\n          onClick={handleApply(onApply, trafficLight)}\r\n          />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nCollageTrafficLightEditor.propTypes = {\r\n  className: PropTypes.string,\r\n  trafficLight: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    pictureType: PropTypes.string,\r\n    x: PropTypes.number,\r\n    y: PropTypes.number,\r\n    width: PropTypes.number,\r\n    height: PropTypes.number\r\n  }).isRequired,\r\n  onEdit: PropTypes.func,\r\n  onApply: PropTypes.func,\r\n  selectedRectangle: PropTypes.shape({\r\n    x: PropTypes.number,\r\n    y: PropTypes.number,\r\n    w: PropTypes.number,\r\n    h: PropTypes.number\r\n  }),\r\n  collagePictureTypes: PropTypes.array.isRequired,\r\n  getCollagePictureTypeId: PropTypes.func.isRequired,\r\n  getCollagePictureTypeName: PropTypes.func.isRequired\r\n};\r\n\r\nCollageTrafficLightEditor.defaultProps = {\r\n  className: null,\r\n  onEdit: () => {},\r\n  onApply: () => {},\r\n  selectedRectangle: null\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedRectangle: selectors.getCollageSelectedRectangle(state),\r\n  collagePictureTypes: selectors.getCollagePictureTypes(state),\r\n  getCollagePictureTypeId: selectors.getCollagePictureTypeId(state),\r\n  getCollagePictureTypeName: selectors.getCollagePictureTypeName(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(CollageTrafficLightEditor);\r\n"]}