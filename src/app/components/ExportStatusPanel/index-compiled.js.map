{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\r\nimport React, {PropTypes} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './ExportStatusPanel.css';\r\nimport Checkbox from '../Checkbox/index';\r\nimport Selector from '../Selector/index';\r\nimport ToggleButton from '../ToggleButton';\r\nimport ExportStatistic from '../ExportStatistic';\r\nimport localizedStrings, {localizeItems} from '../../localization';\r\nimport actionCreators from '../../store/actions';\r\nimport selectors from '../../store/selectors';\r\nimport {curry, compose, prop} from 'ramda';\r\nimport {capitalize} from 'lodash';\r\nimport classNames from 'classnames';\r\nimport Button from '../Button';\r\nimport withDataRequest from '../../higher_order_components/withDataFetch/withDataRequest';\r\nimport withDataRefresh from '../../higher_order_components/withDataFetch/withDataRefresh';\r\n// import withLoadingIndicator from '../../higher_order_components/withLoadingIndicator';\r\nimport requestTypes from '../../common/requestTypes';\r\nimport {baseUrl} from '../../api';\r\n// import {combineRequests} from '../../common/utils';\r\nimport exportTypeNames from '../../common/exportTypes';\r\n\r\nconst handleExportToggle = curry((handler, selectedExportType, toggleExportPotokPlusEnabled, enabled) => {\r\n  handler(selectedExportType.id, enabled);\r\n  if (selectedExportType.name === exportTypeNames.Collage && !enabled) {\r\n    toggleExportPotokPlusEnabled(false);\r\n  }\r\n});\r\nconst handleExportPotokPlusToggle = curry((handler, selectedExportType, toggleExportEnabled, enabled) => {\r\n  handler(enabled);\r\n  if (selectedExportType.name === exportTypeNames.Collage) {\r\n    toggleExportEnabled(selectedExportType.id, enabled);\r\n  }\r\n});\r\nconst handleExportTypeSelection = curry((handler, selectedExportTypeId) => handler(selectedExportTypeId));\r\nconst handleRepeatExportToggle = curry((handler, selectedExportTypeId, enabled) => handler(selectedExportTypeId, enabled));\r\n\r\nconst exportEnabledToggle = p => {\r\n  const {selectedExportType, exportEnabled, exportPotokPlusEnabled, toggleExportEnabled, toggleExportPotokPlusEnabled} = p;\r\n  return (\r\n    <Checkbox\r\n      id=\"export-switch\"\r\n      label={localizedStrings.Enable}\r\n      checked={(selectedExportType && (selectedExportType.name === exportTypeNames.Collage) && exportPotokPlusEnabled) || exportEnabled}\r\n      disabled={(!selectedExportType || (selectedExportType.name === exportTypeNames.Collage)) && exportPotokPlusEnabled}\r\n      onChanged={handleExportToggle(toggleExportEnabled, selectedExportType, toggleExportPotokPlusEnabled)}\r\n      />\r\n  );\r\n};\r\n\r\nconst exportEnabledToggleRow = p => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-1\">\r\n      {exportEnabledToggle(p)}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst exportTypeSelector = p => {\r\n  const {exportTypes, selectedExportTypeId, selectExportType} = p;\r\n  return (\r\n    <Selector\r\n      id=\"export-format-selector\"\r\n      label={localizedStrings.ExportTypeLabel}\r\n      items={localizeItems(exportTypes)}\r\n      selectedItemId={selectedExportTypeId}\r\n      placeholder={capitalize(localizedStrings.Undefined)}\r\n      selectItem={handleExportTypeSelection(selectExportType)}\r\n      />\r\n  );\r\n};\r\n\r\nconst repeatExportEnabledToggle = p => {\r\n  const {selectedExportTypeId, toggleRepeatExportEnabled} = p;\r\n  return (\r\n    <ToggleButton\r\n      id=\"repeat-export-switch\"\r\n      text={localizedStrings.RepeatExport}\r\n      glyphicon=\"ok\"\r\n      onClick={handleRepeatExportToggle(toggleRepeatExportEnabled, selectedExportTypeId)}\r\n      />\r\n  );\r\n};\r\n\r\nconst exportTypeSelectorRow = p => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-3 vertical-bottom\">\r\n      {exportTypeSelector(p)}\r\n    </div>\r\n    <div className=\"col-md-3 vertical-bottom form-group\">\r\n      {repeatExportEnabledToggle(p)}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst exportPotokPlusToggle = p => {\r\n  const {exportPotokPlusEnabled, toggleExportPotokPlusEnabled,\r\n    selectedExportType, toggleExportEnabled} = p;\r\n  return (\r\n    <Checkbox\r\n      id=\"export-potok-plus\"\r\n      label={localizedStrings.ExportPotokPlus}\r\n      onChanged={handleExportPotokPlusToggle(toggleExportPotokPlusEnabled,\r\n        selectedExportType, toggleExportEnabled)}\r\n      checked={exportPotokPlusEnabled}\r\n      />\r\n  );\r\n};\r\n\r\nconst exportPotokPlusToggleRow = p => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-3\">\r\n      {exportPotokPlusToggle(p)}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst exportStatisticRow = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col-md-12\">\r\n      {<ExportStatistic/>}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst saveConfiguration = p => () => {\r\n  p.requestUpdateExportPotokPlusEnabled(baseUrl, p.exportPotokPlusEnabled)\r\n    .then(() => p.requestUpdateExportEnabled(baseUrl, p.selectedExportTypeId, p.exportEnabled));\r\n  if (p.repeatExportEnabled) {\r\n    p.requestRepeatExport(baseUrl, p.selectedExportTypeId);\r\n  }\r\n};\r\n\r\nconst saveConfigurationButtonRow = p => (\r\n  <div className=\"row\">\r\n    <div className=\"col-xs-4 col-xs-offset-6 col-sm-2 col-sm-offset-10 col-md-1 col-md-offset-11\">\r\n      <Button\r\n        id=\"apply-button\"\r\n        text={localizedStrings.Apply}\r\n        onClick={saveConfiguration(p)}\r\n        />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst ExportStatusPanel = props => {\r\n  const {style, className} = props;\r\n  return (\r\n    <div style={style} className={classNames('ExportStatusPanel', className)}>\r\n      <div className=\"container-fluid\">\r\n        {exportEnabledToggleRow(props)}\r\n        {exportTypeSelectorRow(props)}\r\n        {exportPotokPlusToggleRow(props)}\r\n        {exportStatisticRow()}\r\n        {saveConfigurationButtonRow(props)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nExportStatusPanel.propTypes = {\r\n  style: PropTypes.object,\r\n  className: PropTypes.string,\r\n  exportTypes: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectedExportTypeId: PropTypes.string,\r\n  selectedExportType: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  }),\r\n  exportEnabled: PropTypes.bool.isRequired,\r\n  repeatExportEnabled: PropTypes.bool.isRequired,\r\n  exportPotokPlusEnabled: PropTypes.bool.isRequired,\r\n  requestReadSelectedExportTypeId: PropTypes.func.isRequired,\r\n  readSelectedExportTypeIdRequest: PropTypes.object.isRequired,\r\n  selectExportType: PropTypes.func.isRequired,\r\n  requestUpdateSelectedExportType: PropTypes.func.isRequired,\r\n  requestReadExportEnabled: PropTypes.func.isRequired,\r\n  readExportEnabledRequests: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  requestReadExportPotokPlusEnabled: PropTypes.func.isRequired,\r\n  readExportPotokPlusEnabledRequest: PropTypes.object.isRequired,\r\n  toggleExportEnabled: PropTypes.func.isRequired,\r\n  toggleExportPotokPlusEnabled: PropTypes.func.isRequired,\r\n  toggleRepeatExportEnabled: PropTypes.func.isRequired,\r\n  requestUpdateExportEnabled: PropTypes.func.isRequired,\r\n  requestUpdateExportPotokPlusEnabled: PropTypes.func.isRequired,\r\n  requestRepeatExport: PropTypes.func.isRequired\r\n};\r\n\r\nExportStatusPanel.defaultProps = {\r\n  style: null,\r\n  className: null\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const exportTypes = selectors.getExportTypes(state);\r\n  const selectedExportTypeId = selectors.getSelectedExportTypeId(state);\r\n  return {\r\n    exportTypes,\r\n    selectedExportTypeId,\r\n    selectedExportType: selectors.getSelectedExportType(state),\r\n    exportEnabled: selectors.getExportEnabled(selectedExportTypeId, state),\r\n    repeatExportEnabled: selectors.getRepeatExportEnabled(selectedExportTypeId, state),\r\n    exportPotokPlusEnabled: selectors.getExportPotokPlusEnabled(state),\r\n    readExportEnabledRequests: exportTypes.map(e =>\r\n        selectors.getRequest(state, requestTypes.readExportEnabled(e.id))),\r\n    readSelectedExportTypeIdRequest: selectors.getRequest(state, requestTypes.ReadSelectedExportTypeId),\r\n    readExportPotokPlusEnabledRequest: selectors.getRequest(state, requestTypes.ReadExportPotokPlusEnabled)\r\n  };\r\n};\r\n\r\nconst selectDataRequest = p => ({\r\n  send: baseUrl => {\r\n    p.requestReadSelectedExportTypeId(baseUrl)\r\n      .then(id => {\r\n        if (id) {\r\n          p.requestReadExportEnabled(baseUrl, id);\r\n        }\r\n      });\r\n    // p.exportTypes.forEach(e => p.requestReadExportEnabled(baseUrl, e.id));\r\n    p.requestReadExportPotokPlusEnabled(baseUrl);\r\n  }\r\n});\r\nconst selectDataRefresh = p => ({send: p.requestReadExportEnabled, params: p.selectedExportTypeId});\r\n// const selectLoadingRequest = p =>\r\n//   combineRequests(p.readSelectedExportTypeIdRequest, ...(p.readExportEnabledRequests),\r\n//     p.readExportPotokPlusEnabledRequest);\r\nconst panel = compose(\r\n  withDataRequest(selectDataRequest),\r\n  withDataRefresh(prop('selectedExportTypeId'), selectDataRefresh)\r\n  // withLoadingIndicator(selectLoadingRequest, null)\r\n)(ExportStatusPanel);\r\n\r\nexport default connect(mapStateToProps, actionCreators)(panel);\r\n"]}