{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAM,6BAA6B,SAA7B,0BAA6B;AAAA,MAAE,KAAF,QAAE,KAAF;AAAA,MAAS,SAAT,QAAS,SAAT;AAAA,MAAoB,EAApB,QAAoB,EAApB;AAAA,MAAwB,MAAxB,QAAwB,MAAxB;AAAA,MACjC,mBADiC,QACjC,mBADiC;AAAA,MACZ,wBADY,QACZ,wBADY;AAAA,MACc,oBADd,QACc,oBADd;AAAA,SAEjC;AAAA;AAAA,MAAK,OAAO,KAAZ,EAAmB,WAAW,0BAAW,4BAAX,EAAyC,SAAzC,CAA9B;AACE;AACE,UAAI,EADN;AAEE,sBAAgB,oBAFlB;AAGE,aAAU,wBAAW,uBAAiB,uBAA5B,CAAV,MAHF;AAIE,aAAO,mBAJT;AAKE,kBAAY,wBALd;AAME,cAAQ;AANV;AADF,GAFiC;AAAA,CAAnC;;AA2BA,2BAA2B,SAA3B,GAAuC;AACrC,SAAO,iBAAU,MADoB;AAErC,aAAW,iBAAU,MAFgB;AAGrC,MAAI,iBAAU,MAHuB;AAIrC,UAAQ,iBAAU,IAJmB;AAKrC,uBAAqB,iBAAU,OAAV,CAAkB,iBAAU,KAAV,CAAgB;AACrD,QAAI,iBAAU,MAAV,CAAiB,UADgC;AAErD,UAAM,iBAAU,MAAV,CAAiB;AAF8B,GAAhB,CAAlB,EAGjB,UARiC;AASrC,4BAA0B,iBAAU,IATC;AAUrC,wBAAsB,iBAAU;AAVK,CAAvC;;AAaA,2BAA2B,YAA3B,GAA0C;AACxC,SAAO,IADiC;AAExC,aAAW,IAF6B;AAGxC,MAAI,8BAHoC;AAIxC,UAAQ,KAJgC;AAKxC,4BAA0B,oCAAM,CAAE;AALM,CAA1C;;kBAQe,0B","file":"index-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport React, {PropTypes} from 'react';\r\nimport './RecognitionChannelSelector.css';\r\nimport classNames from 'classnames';\r\nimport Selector from '../Selector';\r\nimport localizedStrings from '../../localization';\r\nimport {capitalize/* , find*/} from 'lodash';\r\n// import {curry} from 'ramda';\r\n// import AutoComplete from 'material-ui/AutoComplete';\r\n// import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n// import injectTapEventPlugin from 'react-tap-event-plugin';\r\n// injectTapEventPlugin();\r\n//\r\n// const handleSelection = curry((channels, selectChannel, _, channelIndex) => {\r\n//   if (channelIndex < 0) {\r\n//     return;\r\n//   }\r\n//   selectChannel(channels[channelIndex].id);\r\n// });\r\n//\r\n// const findRecognitionChannel = (channels, channelId) => {\r\n//   return find(channels, ch => ch.id === channelId);\r\n// };\r\n\r\nconst RecognitionChannelSelector = ({style, className, id, inline,\r\n  recognitionChannels, selectRecognitionChannel, recognitionChannelId}) => (\r\n  <div style={style} className={classNames('RecognitionChannelSelector', className)}>\r\n    <Selector\r\n      id={id}\r\n      selectedItemId={recognitionChannelId}\r\n      label={`${capitalize(localizedStrings.RecognitionChannelLabel)}:`}\r\n      items={recognitionChannels}\r\n      selectItem={selectRecognitionChannel}\r\n      inline={inline}\r\n      />\r\n    {/* <MuiThemeProvider>\r\n      <AutoComplete\r\n        floatingLabelText={`${capitalize(localizedStrings.RecognitionChannelLabel)}`}\r\n        hintText=\"Выберите канал распознавания\"\r\n        dataSource={recognitionChannels}\r\n        dataSourceConfig={{text: 'name', value: 'name'}}\r\n        filter={AutoComplete.caseInsensitiveFilter}\r\n        openOnFocus\r\n        menuStyle={{maxHeight: 300}}\r\n        onNewRequest={handleSelection(recognitionChannels, selectRecognitionChannel)}\r\n        searchText={findRecognitionChannel(recognitionChannels, recognitionChannelId).name}\r\n        />\r\n    </MuiThemeProvider>*/}\r\n  </div>\r\n);\r\n\r\nRecognitionChannelSelector.propTypes = {\r\n  style: PropTypes.object,\r\n  className: PropTypes.object,\r\n  id: PropTypes.string,\r\n  inline: PropTypes.bool,\r\n  recognitionChannels: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n  })).isRequired,\r\n  selectRecognitionChannel: PropTypes.func,\r\n  recognitionChannelId: PropTypes.string\r\n};\r\n\r\nRecognitionChannelSelector.defaultProps = {\r\n  style: null,\r\n  className: null,\r\n  id: 'recognition-channel-selector',\r\n  inline: false,\r\n  selectRecognitionChannel: () => {}\r\n};\r\n\r\nexport default RecognitionChannelSelector;\r\n"]}