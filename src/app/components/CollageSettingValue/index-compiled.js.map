{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport React, {PropTypes} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './CollageSettingValue.css';\r\nimport classNames from 'classnames';\r\nimport selectors from '../../store/selectors';\r\nimport actionCreators from '../../store/actions';\r\nimport {capitalize} from 'lodash';\r\nimport localizedStrings from '../../localization';\r\nimport Checkbox from '../Checkbox';\r\nimport ids from '../../store/identifiers';\r\nimport {curry} from 'ramda';\r\nimport CollageSettingValueViewer from '../CollageSettingValueViewer';\r\nimport CollageSettingValueEditor from '../CollageSettingValueEditor';\r\nimport {baseUrl} from '../../api';\r\n\r\nconst handleSettingValueInheritanceChanged = curry((props, isSettingValueInherited) => {\r\n  const {settingId, updateCollageSettingValueInheritance,\r\n    requestUpdateCollageDefaultFontPriority, requestReadCollage, violationTypeId} = props;\r\n  updateCollageSettingValueInheritance(settingId, isSettingValueInherited);\r\n  if (settingId === ids.CollageViolationFontSettingId) {\r\n    const preferDefaultFont = Boolean(isSettingValueInherited);\r\n    requestUpdateCollageDefaultFontPriority(baseUrl, preferDefaultFont)\r\n      .then(() => requestReadCollage(baseUrl, violationTypeId));\r\n  }\r\n});\r\n\r\nconst handleClickOnValue = props => () => {\r\n  const {isEditing, isSettingValueInherited, settingId, beginCollageEditing} = props;\r\n  if (isSettingValueInherited || isEditing) {\r\n    return;\r\n  }\r\n  beginCollageEditing(settingId);\r\n};\r\n\r\nconst CollageSettingValue = props => {\r\n  const {className, settingId, settingParentId, isEditing, isSettingValueInherited} = props;\r\n  return (\r\n    <div className={classNames('CollageSettingValue', className)}>\r\n      {(settingParentId && !isEditing) ?\r\n        <Checkbox\r\n          label={capitalize(localizedStrings.ByDefault)}\r\n          checked={isSettingValueInherited}\r\n          onChanged={handleSettingValueInheritanceChanged(props)}\r\n          /> : null}\r\n      <div onClick={handleClickOnValue(props)} style={isSettingValueInherited ? {cursor: 'default', color: 'gray'} : null}>\r\n        {isEditing ?\r\n          <CollageSettingValueEditor settingId={settingId}/> :\r\n          <CollageSettingValueViewer settingId={settingId}/>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCollageSettingValue.propTypes = {\r\n  className: PropTypes.string,\r\n  settingId: PropTypes.string.isRequired,\r\n  isEditing: PropTypes.bool,\r\n  settingParentId: PropTypes.string,\r\n  isSettingValueInherited: PropTypes.bool,\r\n  updateCollageSettingValueInheritance: PropTypes.func.isRequired,\r\n  requestUpdateCollageDefaultFontPriority: PropTypes.func.isRequired,\r\n  requestReadCollage: PropTypes.func.isRequired,\r\n  violationTypeId: PropTypes.string.isRequired,\r\n  beginCollageEditing: PropTypes.func.isRequired\r\n};\r\n\r\nCollageSettingValue.defaultProps = {\r\n  className: null\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const setting = selectors.getCollageSetting(state, ownProps.settingId);\r\n  return {\r\n    isEditing: setting.isEditing,\r\n    settingParentId: setting.parentId,\r\n    isSettingValueInherited: setting.isValueInherited,\r\n    violationTypeId: selectors.getSelectedViolationTypeId(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, actionCreators)(CollageSettingValue);\r\n"]}