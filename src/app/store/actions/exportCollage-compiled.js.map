{"version":3,"sources":["exportCollage.js"],"names":[],"mappings":"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","file":"exportCollage-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport actionTypes from '../actionTypes';\r\nimport {createRequestThunk, noop} from './common';\r\nimport api from '../../api';\r\nimport requestTypes from '../../common/requestTypes';\r\nimport {curry} from 'ramda';\r\nimport {find} from 'lodash';\r\nimport ids, {collageTrafficLightSettingId, collageRoadSignSettingId} from '../../store/identifiers';\r\nimport {collagePictureTypesToSettingIdsMap, collagePictureTypesToSettingNamesMap} from '../../common/collagePictureTypes';\r\nimport selectors from '../selectors';\r\nimport collageSettingTypes, {settingTypeIdsToSettingTypesMap} from '../../common/collageSettingTypes';\r\nimport foregroundCollageObjectTypes, {foregroundCollageObjectTypesToSettingTypeIdsMap}\r\n  from '../../common/foregroundCollageObjectTypes';\r\n\r\nconst replaceForegroundCollageObjectTypes = ({foregroundObjectTypes, foregroundObjectTypeIds}) => ({\r\n  type: actionTypes.ReplaceForegroundCollageObjectTypes,\r\n  payload: {foregroundObjectTypes, foregroundObjectTypeIds}\r\n});\r\n\r\nconst appendCollageSettingTypes = ({foregroundObjectTypes, foregroundObjectTypeIds}) => {\r\n  const settingTypeIds = foregroundObjectTypeIds\r\n    .map(id => foregroundCollageObjectTypesToSettingTypeIdsMap[foregroundObjectTypes[id].name])\r\n    .filter(id => id);\r\n  const settingTypes = {};\r\n  settingTypeIds.forEach(id => {\r\n    settingTypes[id] = {id, name: settingTypeIdsToSettingTypesMap[id]};\r\n  });\r\n  return {\r\n    type: actionTypes.AppendCollageSettingTypes,\r\n    payload: {settingTypes, settingTypeIds}\r\n  };\r\n};\r\n\r\nexport const requestReadForegroundCollageObjectTypes = createRequestThunk({\r\n  request: api.readForegroundCollageObjectTypes,\r\n  key: requestTypes.ReadForegroundCollageObjectTypes,\r\n  success: [\r\n    replaceForegroundCollageObjectTypes,\r\n    appendCollageSettingTypes\r\n  ]\r\n});\r\n\r\nexport const updateCollageSelectedRectangle = selectedRectangle => ({\r\n  type: actionTypes.UpdateCollageSelectedRectangle,\r\n  payload: {selectedRectangle}\r\n});\r\n\r\nexport const deleteCollageSelectedRectangle = () => ({\r\n  type: actionTypes.DeleteCollageSelectedRectangle\r\n});\r\n\r\nconst replaceCollage = collage => dispatch => {\r\n  dispatch({\r\n    type: actionTypes.ReplaceCollage,\r\n    payload: {collage}\r\n  });\r\n  dispatch(deleteCollageSelectedRectangle());\r\n};\r\n\r\nexport const requestReadCollage = createRequestThunk({\r\n  request: api.readCollage,\r\n  key: (_, violationTypeId) => requestTypes.readCollage(violationTypeId),\r\n  success: [\r\n    replaceCollage\r\n  ]\r\n});\r\n\r\nconst prependCollageSettingTypes = ({settingTypes, settingTypeIds}) => ({\r\n  type: actionTypes.PrependCollageSettingTypes,\r\n  payload: {settingTypes, settingTypeIds}\r\n});\r\n\r\nexport const selectCollageSettingType = id => ({\r\n  type: actionTypes.SelectCollageSettingType,\r\n  payload: {id}\r\n});\r\n\r\nconst selectFirstCollageSettingType = ({settingTypeIds}) =>\r\n  settingTypeIds.length > 0 ? selectCollageSettingType(settingTypeIds[0]) : noop('No collage setting type to select');\r\n\r\nexport const requestReadCollageSettingTypes = createRequestThunk({\r\n  request: api.readCollageSettingTypes,\r\n  key: requestTypes.ReadCollageSettingTypes,\r\n  success: [\r\n    prependCollageSettingTypes,\r\n    selectFirstCollageSettingType\r\n  ]\r\n});\r\n\r\nexport const replaceCollageVideoExportModes = ({videoExportModes, videoExportModeIds}) => ({\r\n  type: actionTypes.ReplaceCollageVideoExportModes,\r\n  payload: {videoExportModes, videoExportModeIds}\r\n});\r\n\r\nexport const selectCollageVideoExportMode = id => (dispatch, getState) => {\r\n  dispatch({\r\n    type: actionTypes.SelectCollageVideoExportMode,\r\n    payload: {id, name: getState().exportCollage.videoExportModes.byId[id].name}\r\n  });\r\n};\r\n\r\nexport const requestReadCollageVideoExportModes = createRequestThunk({\r\n  request: api.readVideoExportModes,\r\n  key: requestTypes.ReadCollageVideoExportModes,\r\n  success: [\r\n    replaceCollageVideoExportModes\r\n  ]\r\n});\r\n\r\nexport const requestReadCollageCurrentVideoExportMode = createRequestThunk({\r\n  request: api.readCurrentVideoExportMode,\r\n  key: requestTypes.ReadCollageCurrentVideoExportMode,\r\n  success: [\r\n    ({id}) => selectCollageVideoExportMode(id)\r\n  ]\r\n});\r\n\r\nexport const requestUpdateCollageCurrentVideoExportMode = createRequestThunk({\r\n  request: api.updateCurrentVideoExportMode,\r\n  key: requestTypes.UpdateCollageCurrentVideoExportMode\r\n});\r\n\r\nexport const beginCollageEditing = settingId => ({\r\n  type: actionTypes.BeginCollageEditing,\r\n  payload: {settingId}\r\n});\r\n\r\nexport const finishCollageEditing = settingId => ({\r\n  type: actionTypes.FinishCollageEditing,\r\n  payload: {settingId}\r\n});\r\n\r\nconst replaceCollageVideoExportSettings = ({videoSecondsBeforeCheckTime, videoSecondsAfterCheckTime}) => ({\r\n  type: actionTypes.ReplaceCollageVideoExportSettings,\r\n  payload: {\r\n    videoSecondsBeforeCheckTime,\r\n    videoSecondsAfterCheckTime\r\n  }\r\n});\r\n\r\nexport const updateCollageVideoSecondsBeforeCheckTime = seconds => ({\r\n  type: actionTypes.UpdateCollageVideoSecondsBeforeCheckTime,\r\n  payload: {seconds}\r\n});\r\n\r\nexport const updateCollageVideoSecondsAfterCheckTime = seconds => ({\r\n  type: actionTypes.UpdateCollageVideoSecondsAfterCheckTime,\r\n  payload: {seconds}\r\n});\r\n\r\nexport const requestReadCollageVideoExportSettings = createRequestThunk({\r\n  request: api.readVideoExportSettings,\r\n  key: requestTypes.ReadCollageVideoExportSettings,\r\n  success: [\r\n    replaceCollageVideoExportSettings\r\n  ]\r\n});\r\n\r\nexport const requestUpdateCollageVideoExportSettings = createRequestThunk({\r\n  request: api.updateVideoExportSettings,\r\n  key: requestTypes.UpdateCollageVideoExportSettings\r\n});\r\n\r\nexport const updateCollageDefaultFont = ({name, sizeInPoints}) => ({\r\n  type: actionTypes.UpdateCollageDefaultFont,\r\n  payload: {name, sizeInPoints}\r\n});\r\n\r\nexport const requestReadCollageDefaultFont = createRequestThunk({\r\n  request: api.readCollageDefaultFont,\r\n  key: requestTypes.ReadCollageDefaultFont,\r\n  success: [\r\n    updateCollageDefaultFont\r\n  ]\r\n});\r\n\r\nexport const requestUpdateCollageDefaultFont = createRequestThunk({\r\n  request: api.updateCollageDefaultFont,\r\n  key: requestTypes.UpdateCollageDefaultFont\r\n});\r\n\r\nexport const updateCollageSettingValueInheritance = curry((settingId, isSettingValueInherited) => ({\r\n  type: actionTypes.UpdateCollageSettingValueInheritance,\r\n  payload: {settingId, isSettingValueInherited}\r\n}));\r\n\r\nexport const requestReadCollageDefaultFontPriority = createRequestThunk({\r\n  request: api.readCollageDefaultFontPriority,\r\n  key: requestTypes.ReadCollageDefaultFontPriority,\r\n  success: [updateCollageSettingValueInheritance(ids.CollageViolationFontSettingId)]\r\n});\r\n\r\nexport const requestUpdateCollageDefaultFontPriority = createRequestThunk({\r\n  request: api.updateCollageDefaultFontPriority,\r\n  key: requestTypes.UpdateCollageDefaultFontPriority\r\n});\r\n\r\nexport const updateCollageExportPath = exportPath => ({\r\n  type: actionTypes.UpdateCollageExportPath,\r\n  payload: {exportPath}\r\n});\r\n\r\nexport const requestReadCollageExportPath = createRequestThunk({\r\n  request: api.readCollageExportPath,\r\n  key: requestTypes.ReadCollageExportPath,\r\n  success: [updateCollageExportPath]\r\n});\r\n\r\nexport const requestUpdateCollageExportPath = createRequestThunk({\r\n  request: api.updateCollageExportPath,\r\n  key: requestTypes.UpdateCollageExportPath\r\n});\r\n\r\nexport const updateCollageFont = font => (dispatch, getState) => {\r\n  const violationTypeId = getState().ui.selectedViolationTypeId;\r\n  dispatch({\r\n    type: actionTypes.UpdateCollageFont,\r\n    payload: {violationTypeId, font}\r\n  });\r\n};\r\n\r\nexport const requestReadCollageFont = createRequestThunk({\r\n  request: api.readCollageFont,\r\n  key: (_, violationTypeId) => requestTypes.readCollageFont(violationTypeId),\r\n  success: [updateCollageFont]\r\n});\r\n\r\nexport const requestUpdateCollageFont = createRequestThunk({\r\n  request: api.updateCollageFont,\r\n  key: (_, violationTypeId) => requestTypes.updateCollageFont(violationTypeId)\r\n});\r\n\r\nconst collageFooterTemplateSettingId = (collagePictureType, violationTypeId) => {\r\n  const settingId = collagePictureTypesToSettingIdsMap[collagePictureType];\r\n  if (!settingId) {\r\n    throw new Error(`Unknown collage picture type '${collagePictureType}'`);\r\n  }\r\n  return `${settingId}/${violationTypeId}`;\r\n};\r\n\r\nconst replaceCollageFooterTemplates = ({footerTemplates, collagePictureTypes}) => (dispatch, getState) => {\r\n  const violationTypeId = selectors.getSelectedViolationTypeId(getState());\r\n  const settingTypes = selectors.getCollageSettingTypes(getState());\r\n  const currentViolationSettingTypeId = find(settingTypes, t => t.name === collageSettingTypes.CurrentViolation).id;\r\n  const collageFooterTemplates = collagePictureTypes.map(collagePictureType => {\r\n    const id = collageFooterTemplateSettingId(collagePictureType, violationTypeId);\r\n    return {\r\n      id,\r\n      typeId: currentViolationSettingTypeId,\r\n      name: collagePictureTypesToSettingNamesMap[collagePictureType],\r\n      value: footerTemplates[collagePictureType].footerLines,\r\n      editorTypeId: ids.FooterTemplateEditorTypeId,\r\n      isEditing: false\r\n    };\r\n  });\r\n  const collageFooterTemplateIds = collagePictureTypes.map(collagePictureType =>\r\n    collageFooterTemplateSettingId(collagePictureType, violationTypeId));\r\n  dispatch({\r\n    type: actionTypes.ReplaceCollageFooterTemplates,\r\n    payload: {collageFooterTemplates, collageFooterTemplateIds}\r\n  });\r\n};\r\n\r\nexport const requestReadCollageFooterTemplates = createRequestThunk({\r\n  request: api.readCollageFooterTemplates,\r\n  key: (_, violationTypeId) => requestTypes.readCollageFooterTemplates(violationTypeId),\r\n  success: [replaceCollageFooterTemplates]\r\n});\r\n\r\nexport const requestUpdateCollageFooterTemplate = createRequestThunk({\r\n  request: api.updateCollageFooterTemplate,\r\n  key: (_, violationTypeId, {collagePictureType}) =>\r\n    requestTypes.updateCollageFooterTemplate(violationTypeId, collagePictureType)\r\n});\r\n\r\nexport const updateCollageFooterTemplate = ({footerLines, collagePictureType}) => (dispatch, getState) => {\r\n  const violationTypeId = selectors.getSelectedViolationTypeId(getState());\r\n  const footerTemplateSettingId = collageFooterTemplateSettingId(collagePictureType, violationTypeId);\r\n  dispatch({\r\n    type: actionTypes.UpdateCollageFooterTemplate,\r\n    payload: {footerLines, footerTemplateSettingId}\r\n  });\r\n};\r\n\r\nconst addCollageTrafficLight = trafficLight => (dispatch, getState) => {\r\n  const state = getState();\r\n  const violationTypeId = selectors.getSelectedViolationTypeId(state);\r\n  const trafficLightSettingId = collageTrafficLightSettingId(violationTypeId, trafficLight.id);\r\n  const trafficLightSetting = {\r\n    id: trafficLightSettingId,\r\n    typeId: ids.CollageTrafficLightsSettingTypeId,\r\n    name: foregroundCollageObjectTypes.TrafficLight,\r\n    value: {...trafficLight},\r\n    editorTypeId: ids.CollageTrafficLightEditorTypeId\r\n  };\r\n  dispatch({\r\n    type: actionTypes.AddCollageTrafficLight,\r\n    payload: {trafficLightSettingId, trafficLightSetting}\r\n  });\r\n};\r\n\r\nexport const requestCreateCollageTrafficLight = createRequestThunk({\r\n  request: api.createCollageTrafficLight,\r\n  key: (_, violationTypeId) =>\r\n    requestTypes.createCollageTrafficLight(violationTypeId),\r\n  success: [addCollageTrafficLight]\r\n});\r\n\r\nexport const updateCollageSettingSelection = (settingId, settingSelected) => ({\r\n  type: actionTypes.UpdateCollageSettingSelection,\r\n  payload: {settingId, settingSelected}\r\n});\r\n\r\nexport const deleteCollageSetting = settingId => ({\r\n  type: actionTypes.DeleteCollageSetting,\r\n  payload: {settingId}\r\n});\r\n\r\nconst replaceCollageTrafficLights = ({trafficLights, trafficLightIds}) => (dispatch, getState) => {\r\n  const state = getState();\r\n  const violationTypeId = selectors.getSelectedViolationTypeId(state);\r\n  const collageTrafficLights = trafficLightIds.map(tlId => {\r\n    const id = collageTrafficLightSettingId(violationTypeId, tlId);\r\n    return {\r\n      id,\r\n      typeId: ids.CollageTrafficLightsSettingTypeId,\r\n      name: foregroundCollageObjectTypes.TrafficLight,\r\n      value: {...trafficLights[tlId]},\r\n      editorTypeId: ids.CollageTrafficLightEditorTypeId\r\n    };\r\n  });\r\n  const collageTrafficLightIds = trafficLightIds.map(tlId =>\r\n    collageTrafficLightSettingId(violationTypeId, tlId));\r\n  dispatch({\r\n    type: actionTypes.ReplaceCollageTrafficLights,\r\n    payload: {collageTrafficLights, collageTrafficLightIds}\r\n  });\r\n};\r\n\r\nexport const requestReadCollageTrafficLights = createRequestThunk({\r\n  request: api.readCollageTrafficLights,\r\n  key: (_, violationTypeId) => requestTypes.readCollageTrafficLights(violationTypeId),\r\n  success: [replaceCollageTrafficLights]\r\n});\r\n\r\nexport const requestDeleteCollageTrafficLight = createRequestThunk({\r\n  request: api.deleteCollageTrafficLight,\r\n  key: (_, trafficLightId) =>\r\n    requestTypes.deleteCollageTrafficLight(trafficLightId)\r\n});\r\n\r\nconst replaceCollagePictureTypes = ({pictureTypes, pictureTypeIds}) => ({\r\n  type: actionTypes.ReplaceCollagePictureTypes,\r\n  payload: {pictureTypes, pictureTypeIds}\r\n});\r\n\r\nexport const requestReadCollagePictureTypes = createRequestThunk({\r\n  request: api.readCollagePictureTypes,\r\n  key: requestTypes.ReadCollagePictureTypes,\r\n  success: [replaceCollagePictureTypes]\r\n});\r\n\r\nexport const updateCollageTrafficLight = (trafficLightSettingId, trafficLightSettingValue) => ({\r\n  type: actionTypes.UpdateCollageTrafficLight,\r\n  payload: {trafficLightSettingId, trafficLightSettingValue}\r\n});\r\n\r\nexport const requestUpdateCollageTrafficLight = createRequestThunk({\r\n  request: api.updateCollageTrafficLight,\r\n  key: (_, trafficLightId) => requestTypes.updateCollageTrafficLight(trafficLightId)\r\n});\r\n\r\nconst addCollageRoadSign = roadSign => (dispatch, getState) => {\r\n  const state = getState();\r\n  const violationTypeId = selectors.getSelectedViolationTypeId(state);\r\n  const roadSignSettingId = collageRoadSignSettingId(violationTypeId, roadSign.id);\r\n  const roadSignSetting = {\r\n    id: roadSignSettingId,\r\n    typeId: ids.CollageRoadSignsSettingTypeId,\r\n    name: foregroundCollageObjectTypes.Sign,\r\n    value: {...roadSign},\r\n    editorTypeId: ids.CollageRoadSignEditorTypeId\r\n  };\r\n  dispatch({\r\n    type: actionTypes.AddCollageRoadSign,\r\n    payload: {roadSignSettingId, roadSignSetting}\r\n  });\r\n};\r\n\r\nexport const requestCreateCollageRoadSign = createRequestThunk({\r\n  request: api.createCollageRoadSign,\r\n  key: (_, violationTypeId) => requestTypes.createCollageRoadSign(violationTypeId),\r\n  success: [addCollageRoadSign]\r\n});\r\n\r\nexport const requestDeleteCollageRoadSign = createRequestThunk({\r\n  request: api.deleteCollageRoadSign,\r\n  key: (_, roadSignId) => requestTypes.deleteCollageRoadSign(roadSignId)\r\n});\r\n\r\nconst replaceCollageRoadSigns = ({roadSigns, roadSignIds}) => (dispatch, getState) => {\r\n  const state = getState();\r\n  const violationTypeId = selectors.getSelectedViolationTypeId(state);\r\n  const collageRoadSigns = roadSignIds.map(rsId => {\r\n    const id = collageRoadSignSettingId(violationTypeId, rsId);\r\n    return {\r\n      id,\r\n      typeId: ids.CollageRoadSignsSettingTypeId,\r\n      name: foregroundCollageObjectTypes.Sign,\r\n      value: {...roadSigns[rsId]},\r\n      editorTypeId: ids.CollageRoadSignEditorTypeId,\r\n      isSelected: selectors.isCollageSettingSelected(state, id)\r\n    };\r\n  });\r\n  const collageRoadSignIds = roadSignIds.map(rsId =>\r\n    collageRoadSignSettingId(violationTypeId, rsId));\r\n  dispatch({\r\n    type: actionTypes.ReplaceCollageRoadSigns,\r\n    payload: {collageRoadSigns, collageRoadSignIds}\r\n  });\r\n};\r\n\r\nexport const requestReadCollageRoadSigns = createRequestThunk({\r\n  request: api.readCollageRoadSigns,\r\n  key: (_, violationTypeId) => requestTypes.readCollageRoadSigns(violationTypeId),\r\n  success: [replaceCollageRoadSigns]\r\n});\r\n\r\nexport const requestUploadCollageRoadSignFile = createRequestThunk({\r\n  request: api.uploadCollageRoadSignFile,\r\n  key: (_, violationTypeId) => requestTypes.uploadCollageRoadSignFile(violationTypeId)\r\n});\r\n\r\nexport const updateCollageRoadSign = (roadSignSettingId, roadSignSettingValue) => ({\r\n  type: actionTypes.UpdateCollageRoadSign,\r\n  payload: {roadSignSettingId, roadSignSettingValue}\r\n});\r\n\r\nexport const requestUpdateCollageRoadSign = createRequestThunk({\r\n  request: api.updateCollageRoadSign,\r\n  key: (_, roadSignId) => requestTypes.updateCollageRoadSign(roadSignId)\r\n});\r\n\r\nexport const requestSaveCurrentCollageConfiguration = createRequestThunk({\r\n  request: api.saveCurrentCollageConfiguration,\r\n  key: requestTypes.SaveCurrentCollageConfiguration\r\n});\r\n"]}