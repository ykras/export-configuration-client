{"version":3,"sources":["exportCollage.js"],"names":[],"mappings":"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","file":"exportCollage-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport {fetchJson} from './utils';\r\nimport {normalize, Schema, arrayOf} from 'normalizr';\r\nimport {dissoc, compose} from 'ramda';\r\n\r\nconst foregroundObjectType = new Schema('foregroundObjectTypes');\r\nconst normalizeForegroundObjectTypes = data => normalize(data, arrayOf(foregroundObjectType));\r\nconst returnForegroundObjectTypes = ({entities: {foregroundObjectTypes},\r\n  result: foregroundObjectTypeIds}) => ({\r\n    foregroundObjectTypes,\r\n    foregroundObjectTypeIds\r\n  });\r\n\r\nconst settingType = new Schema('settingTypes');\r\nconst normalizeSettingTypes = data => normalize(data, arrayOf(settingType));\r\nconst returnSettingTypes = ({entities: {settingTypes}, result: settingTypeIds}) => ({\r\n  settingTypes,\r\n  settingTypeIds\r\n});\r\n\r\nconst returnCollage = collage => ({\r\n  ...compose(dissoc('imageFormat'), dissoc('imageBase64'))(collage),\r\n  imageBase64: `data:image/${collage.imageFormat};base64,${collage.imageBase64}`\r\n});\r\n\r\nconst footerTemplate = new Schema('footerTemplates', {idAttribute: 'collagePictureType'});\r\nconst normalizeFooterTemplates = data => normalize(data, arrayOf(footerTemplate));\r\nconst returnFooterTemplates = ({entities: {footerTemplates}, result: collagePictureTypes}) => ({\r\n  footerTemplates,\r\n  collagePictureTypes\r\n});\r\n\r\nconst trafficLight = new Schema('trafficLights');\r\nconst normalizeTrafficLights = data => normalize(data, arrayOf(trafficLight));\r\nconst returnTrafficLights = ({entities: {trafficLights}, result: trafficLightIds}) => ({\r\n  trafficLights,\r\n  trafficLightIds\r\n});\r\n\r\nconst pictureType = new Schema('pictureTypes');\r\nconst normalizePictureTypes = data => normalize(data, arrayOf(pictureType));\r\nconst returnPictureTypes = ({entities: {pictureTypes}, result: pictureTypeIds}) => ({\r\n  pictureTypes,\r\n  pictureTypeIds\r\n});\r\n\r\nconst roadSign = new Schema('roadSigns');\r\nconst normalizeRoadSigns = data => normalize(data, arrayOf(roadSign));\r\nconst returnRoadSigns = ({entities: {roadSigns}, result: roadSignIds}) => ({\r\n  roadSigns,\r\n  roadSignIds\r\n});\r\n\r\nexport default {\r\n  readForegroundCollageObjectTypes: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/foregroundObjectTypes`)\r\n      .then(normalizeForegroundObjectTypes)\r\n      .then(returnForegroundObjectTypes),\r\n  readCollage: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/latestCollage/${violationTypeId}`)\r\n      .then(returnCollage),\r\n  readCollageSettingTypes: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/settingTypes`)\r\n      .then(normalizeSettingTypes)\r\n      .then(returnSettingTypes),\r\n  readCollageDefaultFont: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/defaultFont`),\r\n  updateCollageDefaultFont: (baseUrl = '', defaultFont) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/defaultFont`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(defaultFont)\r\n      }),\r\n  readCollageDefaultFontPriority: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/defaultFont/priority`),\r\n  updateCollageDefaultFontPriority: (baseUrl = '', preferDefaultFont) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/defaultFont/priority`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(preferDefaultFont)\r\n      }),\r\n  readCollageExportPath: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/exportPath`),\r\n  updateCollageExportPath: (baseUrl = '', exportPath) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/exportPath`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(exportPath)\r\n      }),\r\n  readCollageFont: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/font/${violationTypeId}`),\r\n  updateCollageFont: (baseUrl = '', violationTypeId, font) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/font/${violationTypeId}`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(font)\r\n      }),\r\n  readCollageFooterTemplates: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/footerTemplates/${violationTypeId}`)\r\n      .then(normalizeFooterTemplates)\r\n      .then(returnFooterTemplates),\r\n  updateCollageFooterTemplate: (baseUrl = '', violationTypeId, footerTemplate) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/footerTemplates/${violationTypeId}`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(footerTemplate)\r\n      }),\r\n  readCollageTrafficLights: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/trafficLights/${violationTypeId}`)\r\n      .then(normalizeTrafficLights)\r\n      .then(returnTrafficLights),\r\n  createCollageTrafficLight: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/trafficLights/${violationTypeId}`,\r\n      {\r\n        method: 'POST'\r\n      }),\r\n  deleteCollageTrafficLight: (baseUrl = '', trafficLightId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/trafficLights/${trafficLightId}`,\r\n      {\r\n        method: 'DELETE'\r\n      }),\r\n  readCollagePictureTypes: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/pictureTypes`)\r\n      .then(normalizePictureTypes)\r\n      .then(returnPictureTypes),\r\n  updateCollageTrafficLight: (baseUrl = '', trafficLightId, trafficLight) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/trafficLights/${trafficLightId}`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(trafficLight)\r\n      }),\r\n  createCollageRoadSign: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/roadSigns/${violationTypeId}`,\r\n      {\r\n        method: 'POST'\r\n      }),\r\n  deleteCollageRoadSign: (baseUrl = '', roadSignId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/roadSigns/${roadSignId}`,\r\n      {\r\n        method: 'DELETE'\r\n      }),\r\n  readCollageRoadSigns: (baseUrl = '', violationTypeId) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/roadSigns/${violationTypeId}`)\r\n      .then(normalizeRoadSigns)\r\n      .then(returnRoadSigns),\r\n  uploadCollageRoadSignFile: (baseUrl = '', violationTypeId, roadSignFile) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/roadSigns/${violationTypeId}/files`,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify(roadSignFile)\r\n      }),\r\n  updateCollageRoadSign: (baseUrl = '', roadSignId, roadSign) =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/roadSigns/${roadSignId}`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(roadSign)\r\n      }),\r\n  saveCurrentCollageConfiguration: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/exportCollage/currentConfig`,\r\n      {\r\n        method: 'PUT'\r\n      })\r\n};\r\n"]}