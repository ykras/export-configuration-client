{"version":3,"sources":["utils.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAM,SAAS,SAAT,MAAS;AAAA,SAAQ,QAAQ,KAAK,MAAb,GAAsB,KAAK,KAAL,CAAW,IAAX,CAAtB,GAAyC,EAAjD;AAAA,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAM,cAAc,SAAd,WAAc,CAAC,GAAD;AAAA,MAAM,OAAN,uEAAgB,EAAhB;AAAA,SAAuB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC1E,QAAM,MAAM,IAAI,cAAJ,EAAZ;AACA,QAAI,IAAJ,CAAS,QAAQ,MAAR,IAAkB,KAA3B,EAAkC,GAAlC;AACA,QAAI,QAAQ,OAAZ,EAAqB;AACnB,aAAO,IAAP,CAAY,QAAQ,OAApB,EAA6B,OAA7B,CAAqC,eAAO;AAC1C,YAAI,gBAAJ,CAAqB,GAArB,EAA0B,QAAQ,OAAR,CAAgB,GAAhB,CAA1B;AACD,OAFD;AAGD;AACD,QAAI,gBAAJ,CAAqB,QAArB,EAA+B,kBAA/B;AACA,QAAI,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACA,QAAI,MAAJ,GAAa,YAAM;AACjB,UAAI,IAAI,MAAJ,IAAc,GAAd,IAAqB,IAAI,MAAJ,GAAa,GAAtC,EAA2C;AACzC,gBAAQ,IAAI,QAAZ;AACD,OAFD,MAEO;AACL,eAAO,IAAI,UAAX;AACD;AACF,KAND;AAOA,QAAI,OAAJ,GAAc;AAAA,aAAM,OAAO,IAAI,UAAX,CAAN;AAAA,KAAd;AACA,QAAI,IAAJ,CAAS,QAAQ,IAAjB;AACD,GAnB0C,CAAvB;AAAA,CAApB;;AAqBO,IAAM,gCAAY,SAAZ,SAAY,CAAC,GAAD,EAAuB;AAAA,MAAjB,OAAiB,uEAAP,EAAO;;AAC9C,SAAO,YAAY,GAAZ,EAAiB,OAAjB,EACJ,IADI,CACC,MADD,CAAP;AAED,CAHM","file":"utils-compiled.js","sourcesContent":["'use strict';\r\n\r\n// import 'isomorphic-fetch';\r\nimport 'es6-promise/auto';\r\n\r\n// const rejectErrors = res => {\r\n//   if (res.ok) {\r\n//     return res;\r\n//   }\r\n//   throw new Error(res.statusText || res.status);\r\n// };\r\n\r\n// const getText = res => res.text();\r\n//\r\nconst toJson = text => text && text.length ? JSON.parse(text) : {};\r\n\r\n// export const fetchJson = (url, options = {}) => {\r\n//   return fetch(url, {\r\n//     ...options,\r\n//     headers: {\r\n//       ...options.headers,\r\n//       'Accept': 'application/json',\r\n//       'Content-Type': 'application/json'\r\n//     }\r\n//   })\r\n//     .then(rejectErrors)\r\n//     .then(getText)\r\n//     .then(toJson);\r\n// };\r\n\r\nconst requestJson = (url, options = {}) => new Promise((resolve, reject) => {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(options.method || \"GET\", url);\r\n  if (options.headers) {\r\n    Object.keys(options.headers).forEach(key => {\r\n      xhr.setRequestHeader(key, options.headers[key]);\r\n    });\r\n  }\r\n  xhr.setRequestHeader('Accept', 'application/json');\r\n  xhr.setRequestHeader('Content-Type', 'application/json');\r\n  xhr.onload = () => {\r\n    if (xhr.status >= 200 && xhr.status < 300) {\r\n      resolve(xhr.response);\r\n    } else {\r\n      reject(xhr.statusText);\r\n    }\r\n  };\r\n  xhr.onerror = () => reject(xhr.statusText);\r\n  xhr.send(options.body);\r\n});\r\n\r\nexport const fetchJson = (url, options = {}) => {\r\n  return requestJson(url, options)\r\n    .then(toJson);\r\n};\r\n"]}