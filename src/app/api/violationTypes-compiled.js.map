{"version":3,"sources":["violationTypes.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;AACA;;AAEA,IAAM,gBAAgB,sBAAW,gBAAX,CAAtB;;AAEA,IAAM,uBAAuB,SAAvB,oBAAuB;AAAA,SAAQ,0BAAU,IAAV,EAAgB,wBAAQ,aAAR,CAAhB,CAAR;AAAA,CAA7B;;AAEA,IAAM,eAAe,SAAf,YAAe;AAAA,MAAa,cAAb,QAAE,QAAF,CAAa,cAAb;AAAA,MAAsC,gBAAtC,QAA8B,MAA9B;AAAA,SAA6D;AAChF,kCADgF;AAEhF;AAFgF,GAA7D;AAAA,CAArB;;kBAKe;AACb,sBAAoB;AAAA,QAAC,OAAD,uEAAW,EAAX;AAAA,WAClB,sBAAa,OAAb,0BACG,IADH,CACQ,oBADR,EAEG,IAFH,CAEQ,YAFR,CADkB;AAAA;AADP,C","file":"violationTypes-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport {fetchJson} from './utils';\r\nimport {normalize, Schema, arrayOf} from 'normalizr';\r\n\r\nconst violationType = new Schema('violationTypes');\r\n\r\nconst normalizeFetchedData = data => normalize(data, arrayOf(violationType));\r\n\r\nconst returnResult = ({entities: {violationTypes}, result: violationTypeIds}) => ({\r\n  violationTypes,\r\n  violationTypeIds\r\n});\r\n\r\nexport default {\r\n  readViolationTypes: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/violationTypes`)\r\n      .then(normalizeFetchedData)\r\n      .then(returnResult)\r\n};\r\n"]}