'use strict';

import 'isomorphic-fetch';
import 'es6-promise/auto';

const rejectErrors = res => {
  if (res.ok) {
    return res;
  }
  throw new Error(res.statusText || res.status);
};

const getText = res => res.text();

const toJson = text => text && text.length ? JSON.parse(text) : {};

<<<<<<< local
// export const fetchJson = (url, options = {}) => {
//   return fetch(url, {
//     ...options,
//     headers: {
//       ...options.headers,
//       'Accept': 'application/json',
//       'Content-Type': 'application/json'
//     }
//   })
//     .then(rejectErrors)
//     .then(getText)
//     .then(toJson);
// };

const requestJson = (url, options = {}) => new Promise((resolve, reject) => {
  const xhr = new XMLHttpRequest();
  xhr.open(options.method || "GET", url);
  if (options.headers) {
    Object.keys(options.headers).forEach(key => {
      xhr.setRequestHeader(key, options.headers[key]);
    });
  }
  xhr.setRequestHeader('Accept', 'application/json');
  xhr.setRequestHeader('Content-Type', 'application/json');
  xhr.onload = () => {
    if (xhr.status >= 200 && xhr.status < 300) {
      resolve(xhr.response);
    } else {
      reject(xhr.statusText);
=======
export const fetchJson = (url, options = {}) => {
  return fetch(url, {
    ...options,
    headers: {
      ...options.headers,
      'Accept': 'application/json',
      'Content-Type': 'application/json'
>>>>>>> other
    }
  })
    .then(rejectErrors)
    .then(getText)
    .then(toJson);
};
