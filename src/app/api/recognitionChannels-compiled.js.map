{"version":3,"sources":["recognitionChannels.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;AACA;;AAEA,IAAM,qBAAqB,sBAAW,qBAAX,CAA3B;AACA,IAAM,+BAA+B,SAA/B,4BAA+B;AAAA,SAAQ,0BAAU,IAAV,EAAgB,wBAAQ,kBAAR,CAAhB,CAAR;AAAA,CAArC;AACA,IAAM,4BAA4B,SAA5B,yBAA4B;AAAA,MAAa,mBAAb,QAAE,QAAF,CAAa,mBAAb;AAAA,MAA2C,qBAA3C,QAAmC,MAAnC;AAAA,SAAuE;AACvG,4CADuG;AAEvG;AAFuG,GAAvE;AAAA,CAAlC;;kBAKe;AACb,2BAAyB;AAAA,QAAC,OAAD,uEAAW,EAAX;AAAA,WACvB,sBAAa,OAAb,+BACG,IADH,CACQ,4BADR,EAEG,IAFH,CAEQ,yBAFR,CADuB;AAAA;AADZ,C","file":"recognitionChannels-compiled.js","sourcesContent":["'use strict';\r\n\r\nimport {fetchJson} from './utils';\r\nimport {normalize, Schema, arrayOf} from 'normalizr';\r\n\r\nconst recognitionChannel = new Schema('recognitionChannels');\r\nconst normalizeRecognitionChannels = data => normalize(data, arrayOf(recognitionChannel));\r\nconst returnRecognitionChannels = ({entities: {recognitionChannels}, result: recognitionChannelIds}) => ({\r\n  recognitionChannels,\r\n  recognitionChannelIds\r\n});\r\n\r\nexport default {\r\n  readRecognitionChannels: (baseUrl = '') =>\r\n    fetchJson(`${baseUrl}/api/recognitionChannels`)\r\n      .then(normalizeRecognitionChannels)\r\n      .then(returnRecognitionChannels)\r\n};\r\n"]}